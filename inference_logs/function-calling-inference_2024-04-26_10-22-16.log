2024-04-26:10:22:28,061 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The amount of input symbol to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The amount of output symbol to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': [], 'type': 'object'}}}]
2024-04-26:10:22:28,092 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The amount of input symbol to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The amount of output symbol to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': [], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
swap usdc to 3 ETH<|im_end|>
<|im_start|>assistant

2024-04-26:10:22:29,535 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": null, "output_symbol": "eth", "output_amount": 3}, "name": "swap_token"}
</tool_call>

2024-04-26:10:22:54,186 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The amount of input symbol to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The amount of output symbol to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': [], 'type': 'object'}}}]
2024-04-26:10:22:54,188 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The amount of input symbol to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The amount of output symbol to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': [], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
swap A to 3 B<|im_end|>
<|im_start|>assistant

2024-04-26:10:22:55,592 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "A", "input_amount": null, "output_symbol": "B", "output_amount": 3}, "name": "swap_token"}
</tool_call>

2024-04-26:10:23:24,026 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The amount of input symbol to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The amount of output symbol to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': [], 'type': 'object'}}}]
2024-04-26:10:23:24,028 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The amount of input symbol to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The amount of output symbol to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': [], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
 swap usdc to 3 eth<|im_end|>
<|im_start|>assistant

2024-04-26:10:23:25,439 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": null, "output_symbol": "eth", "output_amount": 3}, "name": "swap_token"}
</tool_call>

2024-04-26:10:23:32,276 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The amount of input symbol to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The amount of output symbol to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': [], 'type': 'object'}}}]
2024-04-26:10:23:32,279 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The amount of input symbol to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The amount of output symbol to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': [], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
 swap 1 usdc to 3 eth<|im_end|>
<|im_start|>assistant

2024-04-26:10:23:33,732 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": 1, "output_symbol": "eth", "output_amount": 3}, "name": "swap_token"}
</tool_call>

2024-04-26:10:35:13,949 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}]
2024-04-26:10:35:13,951 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
Swap USDC to 0.3 ETH<|im_end|>
<|im_start|>assistant

2024-04-26:10:35:15,414 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": null, "output_symbol": "eth", "output_amount": 0.3}, "name": "swap_token"}
</tool_call>

2024-04-26:10:35:24,312 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}]
2024-04-26:10:35:24,314 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
Swap USDC to 3 ETH<|im_end|>
<|im_start|>assistant

2024-04-26:10:35:25,732 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": null, "output_symbol": "eth", "output_amount": 3}, "name": "swap_token"}
</tool_call>

2024-04-26:10:36:26,756 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}]
2024-04-26:10:36:26,758 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
Swap 12 USDC to ETH<|im_end|>
<|im_start|>assistant

2024-04-26:10:36:28,208 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": 12, "output_symbol": "eth", "output_amount": null}, "name": "swap_token"}
</tool_call>

2024-04-26:10:36:34,798 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}]
2024-04-26:10:36:34,800 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
Swap 12 USDC to ETH<|im_end|>
<|im_start|>assistant

2024-04-26:10:36:36,241 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": 12, "output_symbol": "eth", "output_amount": null}, "name": "swap_token"}
</tool_call>

2024-04-26:10:36:43,814 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}]
2024-04-26:10:36:43,816 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
Swap 12 USDC to 3 ETH<|im_end|>
<|im_start|>assistant

2024-04-26:10:36:45,278 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": 12, "output_symbol": "eth", "output_amount": 3}, "name": "swap_token"}
</tool_call>

2024-04-26:10:36:55,687 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}]
2024-04-26:10:36:55,689 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
Swap USDC to 3.1 ETH<|im_end|>
<|im_start|>assistant

2024-04-26:10:36:57,171 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": null, "output_symbol": "eth", "output_amount": 3.1}, "name": "swap_token"}
</tool_call>

2024-04-26:10:37:03,806 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}]
2024-04-26:10:37:03,808 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
Swap USDC to 3.1 ETH<|im_end|>
<|im_start|>assistant

2024-04-26:10:37:05,273 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": null, "output_symbol": "eth", "output_amount": 3.1}, "name": "swap_token"}
</tool_call>

2024-04-26:10:37:24,863 INFO     [openai_hermes_entrypoint_api.py:47] [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}]
2024-04-26:10:37:24,865 INFO     [openai_hermes_entrypoint_api.py:59] <|im_start|>system
You are a helpful assistant. You are provided with function signatures within <tools></tools> XML tags. Use them if required The current date is: 2024-04-26. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_weather', 'description': 'get_weather(date: string, location: string) -> dict | str - Get weather\n    \n    Args:\n        date (string): Date to get weather for\n        location (string): Location to get weather for', 'parameters': {'properties': {'date': {'type': 'string'}, 'location': {'type': 'string'}}, 'required': ['date', 'location'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_balance', 'description': 'get_balance(user_id: integer) -> dict | str - Get balance of a user\n    \n    Args:\n        user_id (integer): The id of the user', 'parameters': {'properties': {'user_id': {'type': 'integer'}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_symbol: string, input_amount: integer, output_symbol: string, output_amount: integer) -> dict | str - Swap token of user, You must have either input amount or output amount to swap\n    \n    Args:\n        input_symbol (string): The input symbol to convert\n        input_amount (integer): The input amount to convert\n        output_symbol (string): The output symbol to convert\n        output_amount (integer): The output amount to convert', 'parameters': {'properties': {'input_symbol': {'type': 'string'}, 'input_amount': {'type': 'integer'}, 'output_symbol': {'type': 'string'}, 'output_amount': {'type': 'integer'}}, 'required': ['input_symbol', 'output_symbol'], 'type': 'object'}}}] </tools> Here are some example usage of functions: [{'example': "USER: swap usdc to 3 eth\nASSISTANT:\n<tool_call>\n{'arguments': {'input_symbol': 'usdc', 'input_amount': null, 'output_symbol': 'eth', 'output_amount': 3}, 'name': 'swap_token'}\n</tool_call>"}] Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
If the user prompt does not match any tools, just return:
<tool_call>
None
</tool_call>
Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree.
<|im_end|>
<|im_start|>user
userid: 10, weather at PR and swap USDC to 3 ETH, (PR is HaNoi), get user balance<|im_end|>
<|im_start|>assistant

2024-04-26:10:37:28,124 INFO     [openai_hermes_entrypoint_api.py:84] <tool_call>
{"arguments": {"date": "2024-04-26", "location": "Ha Noi"}, "name": "get_weather"}
</tool_call>
<tool_call>
{"arguments": {"input_symbol": "usdc", "input_amount": null, "output_symbol": "eth", "output_amount": 3}, "name": "swap_token"}
</tool_call>
<tool_call>
{"arguments": {"user_id": 10}, "name": "get_balance"}
</tool_call>

