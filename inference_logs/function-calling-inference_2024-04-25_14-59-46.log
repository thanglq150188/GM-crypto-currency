2024-04-25:14:59:47,558 INFO     [sample_function_callings.py:44] <|im_start|>system
You are a function calling AI agent with self-recursion. You can call only one function at a time and analyse data you get from function response. You are provided with function signatures within <tools></tools> XML tags. The current date is: 2024-04-25. Here are the available tools: <tools> [{'type': 'function', 'function': {'name': 'get_portfolio', 'description': 'get_portfolio(telegram_id: str) -> dict | str - Get portfolio/balance of the user.\n    \n    Args:\n        telegram_id (str): The telegram id of user.\n\n    Returns:\n        dict | str: A dictionary containing variables declared and values returned by function calls,\n            or an error message if an exception occurred.', 'parameters': {'type': 'object', 'properties': {'telegram_id': {'type': 'string'}}, 'required': ['telegram_id']}}}, {'type': 'function', 'function': {'name': 'swap_token', 'description': 'swap_token(input_token_symbol, output_token_symbol, telegram_id, input_token_amount=None, output_token_amount=None, output_token_address=None, slippage=0.01) -> dict - Useful when need to buy/sell/swap.\n            \n\n    Args:\n        input_token_amount (float): The input token amount.\n        output_token_amount (float): The output token amount.\n        input_token_symbol (str): The input token symbol\n        output_token_symbol (str): The output token symbol.\n        output_token_address (str): The output token address\n        slippage (str): The slippage to swap (percent)\n        telegram_id (str): The telegram id of user.', 'parameters': {'type': 'object', 'properties': {'input_token_symbol': {}, 'output_token_symbol': {}, 'telegram_id': {}, 'input_token_amount': {}, 'output_token_amount': {}, 'output_token_address': {}, 'slippage': {'default': 0.01}}, 'required': ['input_token_symbol', 'output_token_symbol', 'telegram_id']}}}, {'type': 'function', 'function': {'name': 'tokens_supported', 'description': 'tokens_supported(chain_name: str, token_address: str, token_symbol: str) -> float - Get the list of tokens that are currently supported in the system\n\n  Args:\n    chain_name (str): The chain name.\n    token_address (str): The token address.\n    token_symbol (str): The token symbol.\n\n  Returns:\n    List: List of tokens that are currently supported in the system', 'parameters': {'type': 'object', 'properties': {'chain_name': {'type': 'string'}, 'token_address': {'type': 'string'}, 'token_symbol': {'type': 'string'}}, 'required': ['chain_name', 'token_address', 'token_symbol']}}}, {'type': 'function', 'function': {'name': 'get_market_info_token', 'description': "get_market_info_token(token_symbol: str, action_type: str, interval: str) -> dict - Price, Market cap, and volume 24h of cryptocurrency\n\n    Args:\n        token_symbol (str): The input token symbol.\n        action_type (str): The action type from input. MUST be one of the following: ['Market cap', 'Volume', 'Price', 'FDV']\n        interval (str): The interval time (e.g., 7 days, 1 week)", 'parameters': {'type': 'object', 'properties': {'token_symbol': {'type': 'string'}, 'action_type': {'type': 'string'}, 'interval': {'type': 'string'}}, 'required': ['token_symbol', 'action_type', 'interval']}}}, {'type': 'function', 'function': {'name': 'transfer_token', 'description': "transfer_token(telegram_id: str, token_address: str, amount: str, token_symbol: str, chain_name: str, destination_wallet_address: str) -> dict - Transfer token from your wallet to another using token address, token symbol, destination wallet address, chain name, amount with telegram id. Return the information that needs to be transferred. You must call 'get_portfolio' function to get exact user balance and calculate before transfer\n\n    Args:\n        telegram_id (str): The telegram id of user.\n        token_address (str): The input token address.\n        amount (str): The amount of token needed to be transfered.\n        token_symbol (str): the input token symbol.\n        chain_name (str): the chain name to transfer.\n        destination_wallet_address (str): The destination wallet address.", 'parameters': {'type': 'object', 'properties': {'telegram_id': {'type': 'string'}, 'token_address': {'type': 'string'}, 'amount': {'type': 'string'}, 'token_symbol': {'type': 'string'}, 'chain_name': {'type': 'string'}, 'destination_wallet_address': {'type': 'string'}}, 'required': ['telegram_id', 'token_address', 'amount', 'token_symbol', 'chain_name', 'destination_wallet_address']}}}, {'type': 'function', 'function': {'name': 'get_document', 'description': 'get_document(input: str) -> dict - Information about project documents, including: Intent Trade (Intent), Whales Market (Whales), Solana, Jupiter. If you have any questions about documenting your projects, you should use this tool!\n\n    Args:\n        input (str): The input for getting documents.', 'parameters': {'type': 'object', 'properties': {'input': {'type': 'string'}}, 'required': ['input']}}}, {'type': 'function', 'function': {'name': 'get_percent_balance', 'description': 'get_percent_balance(input_token_address: str, percent: float, chain_name: str) -> pandas.core.frame.DataFrame - Calculate percent of token balance.\n\n    Args:\n        input_token_address (str): The input token address.\n        percent (float): The percent of token balance.\n        chain_name (str): Chain name - balance on this chain.', 'parameters': {'type': 'object', 'properties': {'input_token_address': {'type': 'string'}, 'percent': {'type': 'number'}, 'chain_name': {'type': 'string'}}, 'required': ['input_token_address', 'percent', 'chain_name']}}}] </tools> If the provided function signatures doesn't have the function you must call, you may write executable python code in markdown syntax and call code_interpreter() function as follows: <tool_call> {"arguments": {"code_markdown": <python-code>, "name": "code_interpreter"}} </tool_call> Make sure that the json object above with code markdown block is parseable with json.loads() and the XML block with XML ElementTree. Use the following pydantic model json schema for each tool call you will make: {'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name'], 'title': 'FunctionCall', 'type': 'object'} For each function call return a valid json object (using doulbe quotes) with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{"arguments": <args-dict>, "name": <function-name>}
</tool_call>
<|im_end|>
<|im_start|>user
Swap 10 USDT to SOL<|im_end|>
<|im_start|>assistant

2024-04-25:14:59:48,420 INFO     [sample_function_callings.py:66] <
2024-04-25:14:59:48,437 INFO     [sample_function_callings.py:66] tool
2024-04-25:14:59:48,462 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:48,484 INFO     [sample_function_callings.py:66] call
2024-04-25:14:59:48,506 INFO     [sample_function_callings.py:66] >
2024-04-25:14:59:48,530 INFO     [sample_function_callings.py:66] 

2024-04-25:14:59:48,556 INFO     [sample_function_callings.py:66] {"
2024-04-25:14:59:48,575 INFO     [sample_function_callings.py:66] arguments
2024-04-25:14:59:48,597 INFO     [sample_function_callings.py:66] ":
2024-04-25:14:59:48,620 INFO     [sample_function_callings.py:66]  {"
2024-04-25:14:59:48,644 INFO     [sample_function_callings.py:66] input
2024-04-25:14:59:48,667 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:48,688 INFO     [sample_function_callings.py:66] token
2024-04-25:14:59:48,711 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:48,733 INFO     [sample_function_callings.py:66] symbol
2024-04-25:14:59:48,756 INFO     [sample_function_callings.py:66] ":
2024-04-25:14:59:48,778 INFO     [sample_function_callings.py:66]  "
2024-04-25:14:59:48,801 INFO     [sample_function_callings.py:66] US
2024-04-25:14:59:48,824 INFO     [sample_function_callings.py:66] DT
2024-04-25:14:59:48,846 INFO     [sample_function_callings.py:66] ",
2024-04-25:14:59:48,869 INFO     [sample_function_callings.py:66]  "
2024-04-25:14:59:48,892 INFO     [sample_function_callings.py:66] output
2024-04-25:14:59:48,914 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:48,937 INFO     [sample_function_callings.py:66] token
2024-04-25:14:59:48,960 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:48,982 INFO     [sample_function_callings.py:66] symbol
2024-04-25:14:59:49,006 INFO     [sample_function_callings.py:66] ":
2024-04-25:14:59:49,028 INFO     [sample_function_callings.py:66]  "
2024-04-25:14:59:49,050 INFO     [sample_function_callings.py:66] S
2024-04-25:14:59:49,073 INFO     [sample_function_callings.py:66] OL
2024-04-25:14:59:49,096 INFO     [sample_function_callings.py:66] ",
2024-04-25:14:59:49,118 INFO     [sample_function_callings.py:66]  "
2024-04-25:14:59:49,141 INFO     [sample_function_callings.py:66] tele
2024-04-25:14:59:49,165 INFO     [sample_function_callings.py:66] gram
2024-04-25:14:59:49,186 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:49,209 INFO     [sample_function_callings.py:66] id
2024-04-25:14:59:49,231 INFO     [sample_function_callings.py:66] ":
2024-04-25:14:59:49,259 INFO     [sample_function_callings.py:66]  "
2024-04-25:14:59:49,277 INFO     [sample_function_callings.py:66] user
2024-04-25:14:59:49,299 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:49,321 INFO     [sample_function_callings.py:66] tele
2024-04-25:14:59:49,350 INFO     [sample_function_callings.py:66] gram
2024-04-25:14:59:49,369 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:49,389 INFO     [sample_function_callings.py:66] id
2024-04-25:14:59:49,411 INFO     [sample_function_callings.py:66] ",
2024-04-25:14:59:49,434 INFO     [sample_function_callings.py:66]  "
2024-04-25:14:59:49,457 INFO     [sample_function_callings.py:66] input
2024-04-25:14:59:49,482 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:49,502 INFO     [sample_function_callings.py:66] token
2024-04-25:14:59:49,524 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:49,547 INFO     [sample_function_callings.py:66] amount
2024-04-25:14:59:49,569 INFO     [sample_function_callings.py:66] ":
2024-04-25:14:59:49,593 INFO     [sample_function_callings.py:66]  
2024-04-25:14:59:49,615 INFO     [sample_function_callings.py:66] 1
2024-04-25:14:59:49,637 INFO     [sample_function_callings.py:66] 0
2024-04-25:14:59:49,660 INFO     [sample_function_callings.py:66] },
2024-04-25:14:59:49,682 INFO     [sample_function_callings.py:66]  "
2024-04-25:14:59:49,704 INFO     [sample_function_callings.py:66] name
2024-04-25:14:59:49,730 INFO     [sample_function_callings.py:66] ":
2024-04-25:14:59:49,751 INFO     [sample_function_callings.py:66]  "
2024-04-25:14:59:49,771 INFO     [sample_function_callings.py:66] swap
2024-04-25:14:59:49,795 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:49,817 INFO     [sample_function_callings.py:66] token
2024-04-25:14:59:49,848 INFO     [sample_function_callings.py:66] "}
2024-04-25:14:59:49,863 INFO     [sample_function_callings.py:66] 

2024-04-25:14:59:49,885 INFO     [sample_function_callings.py:66] </
2024-04-25:14:59:49,909 INFO     [sample_function_callings.py:66] tool
2024-04-25:14:59:49,931 INFO     [sample_function_callings.py:66] _
2024-04-25:14:59:49,953 INFO     [sample_function_callings.py:66] call
2024-04-25:14:59:49,978 INFO     [sample_function_callings.py:66] >
2024-04-25:14:59:50,001 INFO     [sample_function_callings.py:66] 

2024-04-25:14:59:50,023 INFO     [sample_function_callings.py:66] 
